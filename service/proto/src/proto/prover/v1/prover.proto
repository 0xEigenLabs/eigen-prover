syntax = "proto3";

package prover.v1;

message Version {
  string v0_0_1 = 1;
}

service ProverService {
  rpc ProverStream(stream ProverRequest) returns (stream ProverResponse) {}
}

message ProverRequest
{
  string id = 1;
  oneof request_type
  {
    GetStatusRequest get_status = 2;
    GenBatchProofRequest gen_batch_proof = 3;
    GenAggregatedProofRequest gen_aggregated_proof = 4;
    GenFinalProofRequest gen_final_proof = 5;
  }
}

message ProverResponse
{
  string id = 1;

  oneof response_type
  {
    GetStatusResponse get_status = 2;
    GenBatchProofResponse gen_batch_proof = 3;
    GenAggregatedProofResponse gen_aggregated_proof = 4;
    GenFinalProofResponse gen_final_proof = 5;
  }
}


// batch proof

message GenBatchProofRequest {
  oneof step
  {
    GenBatchChunks gen_batch_chunks = 1;
    GenChunkProof gen_chunk_proof = 2;
  }
}

message GenBatchChunks {
  string batch_id = 1;
  Batch batch = 2;
  uint64 chain_id = 3;
  string program_name = 4;
}

message GenChunkProof {
  // batch_id is used for caching and querying pre_state and post_state
  string batch_id = 1;
  // convert batch number to string, and pad the left side with zeros to reach 10 characters
  string task_id = 2;
  // the number of chunks generated by the batch
  uint64 chunk_count = 3;
  uint64 chain_id = 4;
  string program_name = 5;
  string batch_data = 6;
}

message Batch {
  repeated uint64 block_number = 1;
}

message GenBatchProofResponse {
  oneof step
  {
    GenBatchChunksResult gen_batch_chunks = 1;
    GenChunkProofResult gen_chunk_proof = 2;
  }
}

message GenBatchChunksResult {
  string batch_id = 1;
  // convert batch number to string, and pad the left side with zeros to reach 10 characters
  string task_id = 2;
  ProofResultCode result_code = 3;
  uint64 chunk_count = 4;
  // L2 batch data, generated by executor
  string batch_data = 5;
  bytes pre_state_root = 6;
  bytes post_state_root = 7;
  string error_message = 8;
}

message GenChunkProofResult {
  string batch_id = 1;
  // convert batch number to string, and pad the left side with zeros to reach 10 characters
  string task_id = 2;
  ProofResultCode result_code = 3;
  BatchProofResult batch_proof_result = 4;
  string error_message = 5;
}

message BatchProofResult {
  string task_id = 1;
  repeated ChunkProof chunk_proofs = 2;
}

message ChunkProof {
  uint64 chunk_id = 1;
  string proof_key = 3;
  string proof = 2;
}

// aggregated proof

message GenAggregatedProofRequest {
  string batch_id = 1;
  string recursive_proof_1 = 2;
  string recursive_proof_2 = 3;
}

message GenAggregatedProofResponse {
  string batch_id = 1;
  ProofResultCode result_code = 2;
  string result_string = 3;
  string error_message = 4;
}

// final proof

message GenFinalProofRequest {
  string batch_id = 1;
  string recursive_proof = 2;
  string curve_name = 3;
  string aggregator_addr = 4;
}

message GenFinalProofResponse {
  string batch_id = 1;
  ProofResultCode result_code = 2;
  string result_string = 3;
  FinalProof final_proof = 4;
  string error_message = 5;
}

message FinalProof {
  string proof = 1;
  string public_input = 2;
}

// proof result

enum ProofResultCode {
  COMPLETED_OK = 0;
  COMPLETED_ERROR = 1;
}

// get status

message GetStatusRequest {}

message GetStatusResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_BOOTING = 1;
    STATUS_COMPUTING = 2;
    STATUS_IDLE = 3;
    STATUS_HALT = 4;
  }
  string id = 1;
  GetStatusResultCode result_code= 2;
  Status status = 3;
  ProverStatus prover_status = 4;
  string error_message = 5;
}

message ProverStatus {
  string last_computed_request_id = 2;
  uint64 last_computed_end_time = 3;
  string current_computing_request_id = 4;
  uint64 current_computing_start_time = 5;
  string version_proto = 6;
  string version_server = 7;
  repeated string pending_request_queue_ids = 8;
  string prover_name = 9;
  string prover_id = 10;
  uint64 number_of_cores = 11;
  uint64 total_memory = 12;
  uint64 free_memory = 13;
  uint64 fork_id = 14;
}

enum GetStatusResultCode {
  OK = 0;
  FAIL = 1;
}
