syntax = "proto3";

package scheduler.v1;

message Version {
  string v0_0_1 = 1;
}

service SchedulerService {
  rpc SchedulerStream(stream BatchProverMessage) returns (stream SchedulerMessage) {}
}

message BatchProverMessage
{
  string id = 1;
  oneof request
  {
    // status response
    GetStatusResponse get_status_response = 2;
    // batch proof response
    GenBatchProofResponse gen_batch_proof_response = 3;

    CancelRequest cancel_request = 4;
    // proof response
    GetProofResponse get_proof_response = 5;
  }
}

message SchedulerMessage
{
  string id = 1;
  oneof response
  {
    // get status
    GetStatusRequest get_status_request = 2;
    // gen batch proof
    GenBatchProofRequest gen_batch_proof_request = 3;

    CancelResponse cancel_response = 4;
    // get proof
    GetProofRequest get_proof_request = 5;

  }
}

message GetStatusRequest {}

message GenBatchProofRequest {
  InputProver input = 1;
  string execute_task_id = 2;
  string chunk_id = 3;
}

message CancelRequest {
  string id = 1;
}

message GetProofRequest {
  string id = 1;
  uint64 timeout = 2;
}

message GetStatusResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_BOOTING = 1;
    STATUS_COMPUTING = 2;
    STATUS_IDLE = 3;
    STATUS_HALT = 4;
  }
  Status status = 1;
  string prover_name = 2;
  string prover_id = 3;
}

enum Result {
  RESULT_UNSPECIFIED = 0;
  RESULT_OK = 1;
  RESULT_ERROR = 2;
  RESULT_INTERNAL_ERROR = 3;
}

message GenBatchProofResponse {
  string id = 1;
  Result result = 2;
}

message CancelResponse {
  Result result = 1;
}

message GetProofResponse {
  enum Result {
    RESULT_UNSPECIFIED = 0;
    RESULT_COMPLETED_OK = 1;
    RESULT_ERROR = 2;
    RESULT_COMPLETED_ERROR = 3;
    RESULT_PENDING = 4;
    RESULT_INTERNAL_ERROR = 5;
    RESULT_CANCEL = 6;
  }
  string id = 1;
  string recursive_proof =2;
  Result result = 3;
  string result_string = 4;
}

message PublicInputs {
  uint64 old_batch_num = 3;
}

message InputProver {
  PublicInputs public_inputs = 1;
  map<string, string> db = 4; // For debug/testing purpposes only. Don't fill this on production
  map<string, string> contracts_bytecode = 5; // For debug/testing purpposes only. Don't fill this on production
}


