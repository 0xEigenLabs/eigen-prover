
constant %N = 2**15;

namespace Global(%N);
    pol constant L1;
    
namespace Compressor(%N);
    pol constant S[12];
    pol constant C[12];
    pol constant PARTIAL;
    pol constant POSEIDON12;
    pol constant GATE;
    pol constant CMULADD;
    pol constant EVPOL4;
    pol constant FFT4;
    pol commit a[12];
            
    public pub0 = a[0](0);
            
    public pub1 = a[1](0);
            
    public pub2 = a[2](0);
            
    Global.L1 * (a[0] - :pub0) = 0;
            
    Global.L1 * (a[1] - :pub1) = 0;
            
    Global.L1 * (a[2] - :pub2) = 0;
            
    // Normal plonk gates
    pol a01 = a[0]*a[1];
    pol g012 = C[3]*a01 + C[0]*a[0] + C[1]*a[1] + C[2]*a[2] + C[4];
    g012*GATE = 0;

    pol a34 = a[3]*a[4];
    pol g345 = C[3]*a34 + C[0]*a[3] + C[1]*a[4] + C[2]*a[5] + C[4];
    g345*GATE = 0;

    pol a67 = a[6]*a[7];
    pol g678 = C[9]*a67 + C[6]*a[6] + C[7]*a[7] + C[8]*a[8] + C[10];
    g678*GATE = 0;

    pol a910 = a[9]*a[10];
    pol g91011 = C[9]*a910 + C[6]*a[9] + C[7]*a[10] + C[8]*a[11] + C[10];
    g91011*GATE = 0;
    
    // POSEIDON12 GATE
    
    pol a0_1 = a[0] + C[0];
        
    pol a0_2 = a0_1 * a0_1;
        
    pol a0_4 = a0_2 * a0_2;
        
    pol a0_6 = a0_4 * a0_2;
        
    pol a0_7 = a0_6 * a0_1;
        
    pol a0_R = a0_7;
        
    pol a1_1 = a[1] + C[1];
        
    pol a1_2 = a1_1 * a1_1;
        
    pol a1_4 = a1_2 * a1_2;
        
    pol a1_6 = a1_4 * a1_2;
        
    pol a1_7 = a1_6 * a1_1;
        
    pol a1_R = PARTIAL * (a1_1 - a1_7) + a1_7;
        
    pol a2_1 = a[2] + C[2];
        
    pol a2_2 = a2_1 * a2_1;
        
    pol a2_4 = a2_2 * a2_2;
        
    pol a2_6 = a2_4 * a2_2;
        
    pol a2_7 = a2_6 * a2_1;
        
    pol a2_R = PARTIAL * (a2_1 - a2_7) + a2_7;
        
    pol a3_1 = a[3] + C[3];
        
    pol a3_2 = a3_1 * a3_1;
        
    pol a3_4 = a3_2 * a3_2;
        
    pol a3_6 = a3_4 * a3_2;
        
    pol a3_7 = a3_6 * a3_1;
        
    pol a3_R = PARTIAL * (a3_1 - a3_7) + a3_7;
        
    pol a4_1 = a[4] + C[4];
        
    pol a4_2 = a4_1 * a4_1;
        
    pol a4_4 = a4_2 * a4_2;
        
    pol a4_6 = a4_4 * a4_2;
        
    pol a4_7 = a4_6 * a4_1;
        
    pol a4_R = PARTIAL * (a4_1 - a4_7) + a4_7;
        
    pol a5_1 = a[5] + C[5];
        
    pol a5_2 = a5_1 * a5_1;
        
    pol a5_4 = a5_2 * a5_2;
        
    pol a5_6 = a5_4 * a5_2;
        
    pol a5_7 = a5_6 * a5_1;
        
    pol a5_R = PARTIAL * (a5_1 - a5_7) + a5_7;
        
    pol a6_1 = a[6] + C[6];
        
    pol a6_2 = a6_1 * a6_1;
        
    pol a6_4 = a6_2 * a6_2;
        
    pol a6_6 = a6_4 * a6_2;
        
    pol a6_7 = a6_6 * a6_1;
        
    pol a6_R = PARTIAL * (a6_1 - a6_7) + a6_7;
        
    pol a7_1 = a[7] + C[7];
        
    pol a7_2 = a7_1 * a7_1;
        
    pol a7_4 = a7_2 * a7_2;
        
    pol a7_6 = a7_4 * a7_2;
        
    pol a7_7 = a7_6 * a7_1;
        
    pol a7_R = PARTIAL * (a7_1 - a7_7) + a7_7;
        
    pol a8_1 = a[8] + C[8];
        
    pol a8_2 = a8_1 * a8_1;
        
    pol a8_4 = a8_2 * a8_2;
        
    pol a8_6 = a8_4 * a8_2;
        
    pol a8_7 = a8_6 * a8_1;
        
    pol a8_R = PARTIAL * (a8_1 - a8_7) + a8_7;
        
    pol a9_1 = a[9] + C[9];
        
    pol a9_2 = a9_1 * a9_1;
        
    pol a9_4 = a9_2 * a9_2;
        
    pol a9_6 = a9_4 * a9_2;
        
    pol a9_7 = a9_6 * a9_1;
        
    pol a9_R = PARTIAL * (a9_1 - a9_7) + a9_7;
        
    pol a10_1 = a[10] + C[10];
        
    pol a10_2 = a10_1 * a10_1;
        
    pol a10_4 = a10_2 * a10_2;
        
    pol a10_6 = a10_4 * a10_2;
        
    pol a10_7 = a10_6 * a10_1;
        
    pol a10_R = PARTIAL * (a10_1 - a10_7) + a10_7;
        
    pol a11_1 = a[11] + C[11];
        
    pol a11_2 = a11_1 * a11_1;
        
    pol a11_4 = a11_2 * a11_2;
        
    pol a11_6 = a11_4 * a11_2;
        
    pol a11_7 = a11_6 * a11_1;
        
    pol a11_R = PARTIAL * (a11_1 - a11_7) + a11_7;
        
    POSEIDON12 * (a[ 0]' - (25*a0_R + 15*a1_R + 41*a2_R + 16*a3_R +  2*a4_R + 28*a5_R + 13*a6_R + 13*a7_R + 39*a8_R + 18*a9_R + 34*a10_R + 20*a11_R)) = 0;
    POSEIDON12 * (a[ 1]' - (20*a0_R + 17*a1_R + 15*a2_R + 41*a3_R + 16*a4_R +  2*a5_R + 28*a6_R + 13*a7_R + 13*a8_R + 39*a9_R + 18*a10_R + 34*a11_R)) = 0;
    POSEIDON12 * (a[ 2]' - (34*a0_R + 20*a1_R + 17*a2_R + 15*a3_R + 41*a4_R + 16*a5_R +  2*a6_R + 28*a7_R + 13*a8_R + 13*a9_R + 39*a10_R + 18*a11_R)) = 0;
    POSEIDON12 * (a[ 3]' - (18*a0_R + 34*a1_R + 20*a2_R + 17*a3_R + 15*a4_R + 41*a5_R + 16*a6_R +  2*a7_R + 28*a8_R + 13*a9_R + 13*a10_R + 39*a11_R)) = 0;
    POSEIDON12 * (a[ 4]' - (39*a0_R + 18*a1_R + 34*a2_R + 20*a3_R + 17*a4_R + 15*a5_R + 41*a6_R + 16*a7_R +  2*a8_R + 28*a9_R + 13*a10_R + 13*a11_R)) = 0;
    POSEIDON12 * (a[ 5]' - (13*a0_R + 39*a1_R + 18*a2_R + 34*a3_R + 20*a4_R + 17*a5_R + 15*a6_R + 41*a7_R + 16*a8_R +  2*a9_R + 28*a10_R + 13*a11_R)) = 0;
    POSEIDON12 * (a[ 6]' - (13*a0_R + 13*a1_R + 39*a2_R + 18*a3_R + 34*a4_R + 20*a5_R + 17*a6_R + 15*a7_R + 41*a8_R + 16*a9_R +  2*a10_R + 28*a11_R)) = 0;
    POSEIDON12 * (a[ 7]' - (28*a0_R + 13*a1_R + 13*a2_R + 39*a3_R + 18*a4_R + 34*a5_R + 20*a6_R + 17*a7_R + 15*a8_R + 41*a9_R + 16*a10_R +  2*a11_R)) = 0;
    POSEIDON12 * (a[ 8]' - ( 2*a0_R + 28*a1_R + 13*a2_R + 13*a3_R + 39*a4_R + 18*a5_R + 34*a6_R + 20*a7_R + 17*a8_R + 15*a9_R + 41*a10_R + 16*a11_R)) = 0;
    POSEIDON12 * (a[ 9]' - (16*a0_R +  2*a1_R + 28*a2_R + 13*a3_R + 13*a4_R + 39*a5_R + 18*a6_R + 34*a7_R + 20*a8_R + 17*a9_R + 15*a10_R + 41*a11_R)) = 0;
    POSEIDON12 * (a[10]' - (41*a0_R + 16*a1_R +  2*a2_R + 28*a3_R + 13*a4_R + 13*a5_R + 39*a6_R + 18*a7_R + 34*a8_R + 20*a9_R + 17*a10_R + 15*a11_R)) = 0;
    POSEIDON12 * (a[11]' - (15*a0_R + 41*a1_R + 16*a2_R +  2*a3_R + 28*a4_R + 13*a5_R + 13*a6_R + 39*a7_R + 18*a8_R + 34*a9_R + 20*a10_R + 17*a11_R)) = 0;


    // CMULADD GATE
    pol ca0 = (a[0] + C[0])*C[9];
    pol ca1 = (a[1] + C[1])*C[9];
    pol ca2 = (a[2] + C[2])*C[9];
    pol ca3 = a[3] + C[3];
    pol ca4 = a[4] + C[4];
    pol ca5 = a[5] + C[5];
    pol ca6 = (a[6] + C[6])*C[10];
    pol ca7 = (a[7] + C[7])*C[10];
    pol ca8 = (a[8] + C[8])*C[10];
    pol ca9 = a[9];
    pol ca10 = a[10];
    pol ca11 = a[11];

    pol cA = (ca0 + ca1)  * (ca3 + ca4);
    pol cB = (ca0 + ca2)  * (ca3 + ca5);
    pol cC = (ca1 + ca2)  * (ca4 + ca5);
    pol cD = ca0*ca3;
    pol cE = ca1*ca4;
    pol cF = ca2*ca5;

    CMULADD * (ca9 - (cC + cD - cE - cF) - ca6) = 0;
    CMULADD * (ca10 - (cA + cC - 2*cE - cD) - ca7) = 0;
    CMULADD * (ca11 - (cB - cD + cE) - ca8) = 0;

    // FFT4
    
    pol g0 = C[0]*a[0] + C[1]*a[3] + C[2]*a[6] + C[3]*a[9]  + C[6]*a[0] + C[7]*a[3];
    pol g1 = C[0]*a[1] + C[1]*a[4] + C[2]*a[7] + C[3]*a[10] + C[6]*a[1] + C[7]*a[4];
    pol g2 = C[0]*a[2] + C[1]*a[5] + C[2]*a[8] + C[3]*a[11] + C[6]*a[2] + C[7]*a[5];

    pol g3 = C[0]*a[0] - C[1]*a[3] + C[4]*a[6] - C[5]*a[9]  + C[6]*a[0] - C[7]*a[3];
    pol g4 = C[0]*a[1] - C[1]*a[4] + C[4]*a[7] - C[5]*a[10] + C[6]*a[1] - C[7]*a[4];
    pol g5 = C[0]*a[2] - C[1]*a[5] + C[4]*a[8] - C[5]*a[11] + C[6]*a[2] - C[7]*a[5];

    pol g6 = C[0]*a[0] + C[1]*a[3] - C[2]*a[6] - C[3]*a[9]  + C[6]*a[6] + C[8]*a[9];
    pol g7 = C[0]*a[1] + C[1]*a[4] - C[2]*a[7] - C[3]*a[10] + C[6]*a[7] + C[8]*a[10];
    pol g8 = C[0]*a[2] + C[1]*a[5] - C[2]*a[8] - C[3]*a[11] + C[6]*a[8] + C[8]*a[11];

    pol g9  = C[0]*a[0] - C[1]*a[3] - C[4]*a[6] + C[5]*a[9]  + C[6]*a[6] - C[8]*a[9];
    pol g10 = C[0]*a[1] - C[1]*a[4] - C[4]*a[7] + C[5]*a[10] + C[6]*a[7] - C[8]*a[10];
    pol g11 = C[0]*a[2] - C[1]*a[5] - C[4]*a[8] + C[5]*a[11] + C[6]*a[8] - C[8]*a[11];

    FFT4 * (a[0]' - g0) = 0;
    FFT4 * (a[1]' - g1) = 0;
    FFT4 * (a[2]' - g2) = 0;
    FFT4 * (a[3]' - g3) = 0;
    FFT4 * (a[4]' - g4) = 0;
    FFT4 * (a[5]' - g5) = 0;
    FFT4 * (a[6]' - g6) = 0;
    FFT4 * (a[7]' - g7) = 0;
    FFT4 * (a[8]' - g8) = 0;
    FFT4 * (a[9]' - g9) = 0;
    FFT4 * (a[10]' - g10) = 0;
    FFT4 * (a[11]' - g11) = 0;

       
        pol acc1_0_A = (a[0]' + a[1]')  * (a[3]' + a[4]');
            
        pol acc1_0_B = (a[0]' + a[2]')  * (a[3]' + a[5]');
            
        pol acc1_0_C = (a[1]' + a[2]')  * (a[4]' + a[5]');
            
        pol acc1_0_D = a[0]' * a[3]';
        
        pol acc1_0_E = a[1]' * a[4]';
        
        pol acc1_0_F = a[2]' * a[5]';
        
        pol acc1_0 = acc1_0_C + acc1_0_D - acc1_0_E - acc1_0_F + a[9];
        
        pol acc1_1 = acc1_0_A + acc1_0_C - 2*acc1_0_E - acc1_0_D + a[10];
        
        pol acc1_2 = acc1_0_B - acc1_0_D + acc1_0_E + a[11];
        
        pol acc2_0_A = (acc1_0 + acc1_1)  * (a[3]' + a[4]');
            
        pol acc2_0_B = (acc1_0 + acc1_2)  * (a[3]' + a[5]');
            
        pol acc2_0_C = (acc1_1 + acc1_2)  * (a[4]' + a[5]');
            
        pol acc2_0_D = acc1_0 * a[3]';
        
        pol acc2_0_E = acc1_1 * a[4]';
        
        pol acc2_0_F = acc1_2 * a[5]';
        
        pol acc2_0 = acc2_0_C + acc2_0_D - acc2_0_E - acc2_0_F + a[6];
        
        pol acc2_1 = acc2_0_A + acc2_0_C - 2*acc2_0_E - acc2_0_D + a[7];
        
        pol acc2_2 = acc2_0_B - acc2_0_D + acc2_0_E + a[8];
        
        pol acc3_0_A = (acc2_0 + acc2_1)  * (a[3]' + a[4]');
            
        pol acc3_0_B = (acc2_0 + acc2_2)  * (a[3]' + a[5]');
            
        pol acc3_0_C = (acc2_1 + acc2_2)  * (a[4]' + a[5]');
            
        pol acc3_0_D = acc2_0 * a[3]';
        
        pol acc3_0_E = acc2_1 * a[4]';
        
        pol acc3_0_F = acc2_2 * a[5]';
        
        pol acc3_0 = acc3_0_C + acc3_0_D - acc3_0_E - acc3_0_F + a[3];
        
        pol acc3_1 = acc3_0_A + acc3_0_C - 2*acc3_0_E - acc3_0_D + a[4];
        
        pol acc3_2 = acc3_0_B - acc3_0_D + acc3_0_E + a[5];
        
        pol acc4_0_A = (acc3_0 + acc3_1)  * (a[3]' + a[4]');
            
        pol acc4_0_B = (acc3_0 + acc3_2)  * (a[3]' + a[5]');
            
        pol acc4_0_C = (acc3_1 + acc3_2)  * (a[4]' + a[5]');
            
        pol acc4_0_D = acc3_0 * a[3]';
        
        pol acc4_0_E = acc3_1 * a[4]';
        
        pol acc4_0_F = acc3_2 * a[5]';
        
        pol acc4_0 = acc4_0_C + acc4_0_D - acc4_0_E - acc4_0_F + a[0];
        
        pol acc4_1 = acc4_0_A + acc4_0_C - 2*acc4_0_E - acc4_0_D + a[1];
        
        pol acc4_2 = acc4_0_B - acc4_0_D + acc4_0_E + a[2];
        
    EVPOL4 * (a[6]' - acc4_0 ) = 0;
    EVPOL4 * (a[7]' - acc4_1 ) = 0;
    EVPOL4 * (a[8]' - acc4_2 ) = 0;

    // Connection equations
    {a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]} connect
        {S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], S[8], S[9], S[10], S[11]};

    